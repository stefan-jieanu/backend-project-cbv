--------------- Modele ------------------
- pentru a crea modele creez o clasa in fisierul models.py si adaug field-urile necesare.
- pentru a schimba cum apare numele unui obiect in lista din pagina de admin:
    - adaugam functia __str__ unde valoarea returnata va fi afasata in lista
- pentru a schimba numele modelului din pagina de admin
    - vom adauga class Meta:
    - cu proprietatea verbose_name_plural = 'nume_dorit'

- dupa ce modificam un model in models.py, trebuie rulat comenzile:
python manage.py makemigrations
python manage.py migrate

--------------- Admin ------------------
- pentru a adauga un model pe pagina de admin avem functia:
admin.site.register(NumeModel) - pe care o vom pune in fisierul admin.py

- pentru a crea un supreuser pentru pagina de admin:
python manage.py createsuperuser


--------------- Pentru a adauga o pagina noua ------------------
- creez un path in urls.py folosind functia:
path('nume_path', nume_view, name='path_name')
-> ultimul parametru de name este un nume dat pentru path-ul (url) respectiv care poate fi folosit in restul proiectului
Daca folosim Class Based Views trebuie sa apelam functia .as_view()
path('nume_path', nume_view.as_view(), name='path_name')

- creez o functie/clasa in views.py asociat cu pagina respectiva

- creez un nou template de html sau refolosesc unul deja existent (dupa caz):
    - daca vreau o pagina cu o structura noua creez unul nou
    - daca doar modific datele afisate in pagina (ex: filtrate dupa o categorie, gen sau sortate intr-un anumit fel)


--------------- Pentru a adauga un link la o pagina ------------------
- schimbarile factute o sa fie intr-un template
- vom folosit sintaxa {% url 'nume_path' %}
-> nume_path trebuie sa fie unul din numele definite in urls.py
- daca am parametrii in plus in acel link:
exemplu: {% url 'path_name' object.pk %}


--------------- Pentru a crea un formular ------------------
- creez clasa de formular cu field-urile necesare in fisierul forms.py (il creez daca nu exista)
- creez o clasa noua in views.py care o sa proceze datele din formular daca este valid
sau returneaza o eroare daca nu este
- creez un template nou de HTML dupa structura unui template de formular
- adaug un path nou in urls.py pentru pagina cu formularul


--------------- Pentru a crea validatori pentru field-uri din formular ------------------
1.:
- creat o functie in exteriorul clasei folosita in parametrul de validators dintr-un field

2.:
- creat o clasa care mosteneste(inherits) de la o clasa de field (ex: CharField, DateField etc)

3.a:
- folosind functia clean() in interiorul clasei de fomular
- folsit pentru a afisa erori ce implica mai multe field-uri

3.b:
- folosid functia clean_numefield() in interiorul clasei de fomular
- folosit pentru a modifica datele introduse de utilizator


--------------- CRUD operations ------------------
--------------- Create, Read, Update, Delete -----
- cele 4 operatiuni de lucrat cu date


--------------- Pentru a adauga CSS extra, sau ------------------
--------------- Pentru a modifica CSS-ul din clasele din Bootstrap ------------------
- creem in interiorul unei aplicatii un folder numit static
- adaugam un fisier .css (ex: index.css)
- adaugam path-urile pentru fisierele statice (vezi hollymovies/urls.py)
- adaugam fisierul de css in pagina de html, de exemplu:
    - in base.html adaugam in header: <link rel="stylesheet" href="{% static 'index.css' %}">
- ne putem crea clase noi de css, sau ne putem folosi de cele existente in Bootstrap si sa le modificicam
- de exemplu:
.form-control {
    border-radius: 25px;
    // alte proprietati de CSS
}


--------------- Pentru a adauga proprietati noi unui Profile ------------------
--------------- (daca folositi exemplul de cod scris la ora) ------------------
- adaug un field nou in modelul de Profile (in models.py)
- in forms.py, in clasa SignUpForm:
    - adaug un field nou respectiv celui din modelul care sa apara in formular
    - il adaug si in functia de save, in locul in care creeam un obiect nou Profile


--------------- Permissions ------------------
-- authorization vs authentication
- authentication = cine sunt eu ca utilizator (am un cont cu username, parola, pot da login pe site)
- authorization = ce am permisiunea sa fac pe un site (ce pagini pot sa vad, ce obiecte pot adauga, sterge, edita)

---- Adaugat permisiuni ----
1. In pagina de admin:
- intram pe sectiunea Users
- selectam un utilizator si navigam la sectiunea Persmission
- selectam permisiunile acelui utilizator, sau alegem un Grup pentru acel utilizator

1.1: Casuta Staff Status va permite unui utilizator sa vada pagina de admin
1.2: Casuta Superuser Status va oferi unui utilizator toate permisiunile posibile

2. Restrictionat pagini (views):
- in fisierele views.py adaugam unui view clasa PermissionRequireMixin
- adaugm un field numit permission_require = 'numeapp.numeactiune_numemodel'
- unde numeactiune poate fi: view, add, change, delete

---- Permisiuni de Grup ----
- navigam la sectiunea Groups, creem un grup sau selectam unul
- adaugam permisiunile





